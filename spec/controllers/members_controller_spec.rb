require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe MembersController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Member. As you add validations to Members, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {first_name: 'John',
     last_name: 'doe',
     username: 'john',
     password: 'password',
     family_id: 1,
     birth_date: '12/31/1999'
    }
  }

  let(:invalid_attributes) {
    {first_name: 'John',
     last_name: 'doe',
     username: '',
     password: 'password',
     family_id: -11,
     birth_date: '12/31/1999'
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # FamilyActivitiesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  context 'with an authenticated user' do
    before(:each) do
      @user = FactoryGirl.create(:user)
      @family = @user.member.family
      sign_in(@user)
    end

    describe "GET index" do
      it "assigns all members as @members" do
        member = FactoryGirl.create(:member, family_id: @family.id)
        get :index, {family_id: @family.id}, valid_session
        expect(assigns(:members)).to match_array([member,@user.member])
      end
    end

    describe "GET show" do
      it "assigns the requested member as @member" do
        member = FactoryGirl.create(:member, family_id: @family.id)
        get :show, {family_id: @family.id, :id => member.to_param}, valid_session
        expect(assigns(:member)).to eq(member)
      end
    end

    describe "GET new" do
      it "assigns a new member as @member" do
        get :new, {family_id: @family.id}, valid_session
        expect(assigns(:member)).to be_a_new(Member)
      end
    end

    describe "GET edit" do
      it "assigns the requested member as @member" do
        member = FactoryGirl.create(:member, family_id: @family.id)
        get :edit, {family_id: @family.id, :id => member.to_param}, valid_session
        expect(assigns(:member)).to eq(member)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new Member" do
          expect {
            post :create, {family_id: @family.id, :member => valid_attributes}, valid_session
          }.to change(Member, :count).by(1)
        end

        it "assigns a newly created member as @member" do
          post :create, {family_id: @family.id, :member => valid_attributes}, valid_session
          expect(assigns(:member)).to be_a(Member)
          expect(assigns(:member)).to be_persisted
        end

        it "redirects to the created member" do
          post :create, {family_id: @family.id, :member => valid_attributes}, valid_session
          expect(response.status).to eq(302)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved member as @member" do
          post :create, {family_id: @family.id, :member => invalid_attributes}, valid_session
          expect(assigns(:member)).to be_a_new(Member)
        end

        it "re-renders the 'new' template" do
          post :create, {family_id: @family.id, :member => invalid_attributes}, valid_session
          expect(response).to render_template("new")
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        let(:new_attributes) {
          {username: 'steve',
           birth_date: '6/23/1946'
          }
        }

        it "updates the requested member" do
          member = FactoryGirl.create(:member, username: 'johnny', family_id: @family.id)
          put :update, {family_id: @family.id, :id => member.to_param, :member => new_attributes}, valid_session
          member.reload
          expect(member.username).to eq('steve')
          expect(member.birth_date).to eq(Chronic.parse('6/23/1946').to_date)
        end

        it "assigns the requested member as @member" do
          member = FactoryGirl.create(:member, family_id: @family.id)
          put :update, {family_id: @family.id, :id => member.to_param, :member => valid_attributes}, valid_session
          expect(assigns(:member)).to eq(member)
        end

        it "redirects to the member" do
          member = FactoryGirl.create(:member, family_id: @family.id)
          put :update, {family_id: @family.id, :id => member.to_param, :member => valid_attributes}, valid_session
          expect(response).to redirect_to([@family, member])
        end
      end

      describe "with invalid params" do
        it "assigns the member as @member" do
          member = FactoryGirl.create(:member, family_id: @family.id)
          put :update, {family_id: @family.id, :id => member.to_param, :member => invalid_attributes}, valid_session
          expect(assigns(:member)).to eq(member)
        end

        it "re-renders the 'edit' template" do
          member = FactoryGirl.create(:member, family_id: @family.id)
          put :update, {family_id: @family.id, :id => member.to_param, :member => invalid_attributes}, valid_session
          expect(response).to render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested member" do
        member = FactoryGirl.create(:member, family_id: @family.id)
        expect {
          delete :destroy, {family_id: @family.id,:id => member.to_param}, valid_session
        }.to change(Member, :count).by(-1)
      end

      it "redirects to the members list" do
        member = FactoryGirl.create(:member, family_id: @family.id)
        delete :destroy, {family_id: @family.id,:id => member.to_param}, valid_session
        expect(response).to redirect_to(family_members_path(@family))
      end
    end

  end

end
