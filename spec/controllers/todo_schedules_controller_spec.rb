require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TodoSchedulesController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # TodoSchedule. As you add validations to TodoSchedule, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
        todo_id: @todo.id,
        member_id: @kid.id,
        start_date: Date.today,
        active: true
    }
  }

  let(:invalid_attributes) {
    {
        member_id: -1,
        start_date: 2.days.ago,
        end_date: 4.days.ago
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ActivitiesController. Be sure to keep this updated too.
  let(:valid_session) { {} }


  context 'as a parent' do
    before(:each) do
      @member = FactoryGirl.create(:member, parent: true)
      @family = @member.family
      @kid = FactoryGirl.create(:member, parent: false, family_id: @family.id)
      @todo = FactoryGirl.create(:todo, family_id: @family.id)
      sign_in_member(@member)
    end

    describe "GET index" do
      it "assigns all todo_schedules as @todo_schedules" do
        todo_schedule = FactoryGirl.create(:todo_schedule, member_id: @kid.id, todo_id: @todo.id )
        get :index, {family_id: @family.id, todo_id: @todo.id}, valid_session
        expect(assigns(:todo_schedules)).to match_array([todo_schedule])
      end
    end

    # describe "GET show" do
    #   it "assigns the requested todo_schedule as @todo_schedule" do
    #     todo_schedule = FactoryGirl.create(:todo_schedule, member_id: @kid.id, todo_id: @todo.id)
    #     get :show, {family_id: @family.id, todo_id: @todo.id, :id => todo_schedule.to_param}, valid_session
    #     expect(assigns(:todo_schedule)).to eq(todo_schedule)
    #   end
    # end
    #
    # describe "GET new" do
    #   it "assigns a new todo_schedule as @todo_schedule" do
    #     todo_schedule = FactoryGirl.create(:todo_schedule, member_id: @kid.id, todo_id: @todo.id)
    #     get :new, {family_id: @family.id, todo_id: @todo.id, todo_schedule_id: todo_schedule.id}, valid_session
    #     expect(assigns(:todo_schedule)).to be_a_new(TodoSchedule)
    #   end
    # end

    describe "GET edit" do
      it "assigns the requested todo_schedule as @todo_schedule" do
        todo_schedule = FactoryGirl.create(:todo_schedule, member_id: @kid.id, todo_id: @todo.id)
        get :edit, {family_id: @family.id, todo_id: @todo.id, :id => todo_schedule.to_param}, valid_session
        expect(assigns(:todo_schedule)).to eq(todo_schedule)
      end
    end

    describe "DELETE destroy" do
      it "does not destroy the requested todo_schedule if already started" do
        todo_schedule = FactoryGirl.create(:todo_schedule, member_id: @kid.id, todo_id: @todo.id)
        expect {
          delete :destroy, {family_id: @family.id, todo_id: @todo.id, :id => todo_schedule.to_param}, valid_session
        }.to change(TodoSchedule, :count).by(0)
        todo_schedule.reload
        expect(todo_schedule.end_date.change(:usec => 0)).to eq(Date.today.end_of_day.change(:usec => 0))
      end

      it "destroys the requested todo_schedule if starts in the future" do
        todo_schedule = FactoryGirl.create(:todo_schedule, member_id: @kid.id, todo_id: @todo.id, start_date: Date.tomorrow)
        expect {
          delete :destroy, {family_id: @family.id, todo_id: @todo.id, :id => todo_schedule.to_param}, valid_session
        }.to change(TodoSchedule, :count).by(-1)
      end

      it "redirects to the current family dashboard" do
        todo_schedule = FactoryGirl.create(:todo_schedule, member_id: @kid.id, todo_id: @todo.id)
        delete :destroy, {family_id: @family.id, todo_id: @todo.id, :id => todo_schedule.to_param}, valid_session
        expect(flash[:error]).to be_falsey
        expect(response).to redirect_to(@family)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new TodoSchedule" do
          expect {
            post :create, {family_id: @family.id, todo_id: @todo.id, :todo_schedule => valid_attributes}, valid_session
          }.to change(TodoSchedule, :count).by(1)
        end

        it "assigns a newly created todo_schedule as @todo_schedule" do
          post :create, {family_id: @family.id, todo_id: @todo.id, :todo_schedule => valid_attributes}, valid_session
          expect(assigns(:todo_schedule)).to be_a(TodoSchedule)
          expect(assigns(:todo_schedule)).to be_persisted
        end

        it "redirects to the current_family_dashboard" do
          post :create, {family_id: @family.id, todo_id: @todo.id, :todo_schedule => valid_attributes}, valid_session
          expect(response).to redirect_to(@family)
        end
      end

      describe "with invalid params" do

        it "create to fail" do
          expect {
            post :create, {family_id: @family.id, todo_id: @todo.id, :todo_schedule => invalid_attributes}, valid_session
          }.to change(TodoSchedule, :count).by(0)
        end

      end
    end

    describe "PUT update" do
      describe "with valid params" do


        it "update and existing todo_schedule actually duplicates, ends the current and starts the new one" do
          todo_schedule = FactoryGirl.build(:todo_schedule, member_id: @kid.id, todo_id: @todo.id, start_date: 5.days.ago)
          todo_schedule.save(validate: false)
          expect {
            put :update, {family_id: @family.id, todo_id: @todo.id, :id => todo_schedule.to_param, :todo_schedule => {
                           todo_id: @todo.id,
                           member_id: @kid.id,
                           # schedule_rrules_attributes: [ { rule: IceCube::Rule.daily.to_yaml, todo_schedule_id: todo_schedule.id} ]
                       } }, valid_session
          }.to change(TodoSchedule, :count).by(1)
          todo_schedule.reload
          expect(todo_schedule.end_date.change(:usec => 0)).to eq(Date.yesterday.end_of_day.change(:usec => 0))
          expect(TodoSchedule.last.start_date.change(:usec => 0)).to eq(Date.today.beginning_of_day.change(:usec => 0))
        end

        it "assigns the requested todo_schedule as @todo_schedule" do
          todo_schedule = FactoryGirl.create(:todo_schedule, member_id: @kid.id, todo_id: @todo.id)
          put :update, {family_id: @family.id, todo_id: @todo.id, :id => todo_schedule.to_param, :todo_schedule => valid_attributes}, valid_session
          expect(assigns(:todo_schedule)).to eq(todo_schedule)
        end

        it "redirects to the todo_schedule" do
          todo_schedule = FactoryGirl.create(:todo_schedule, member_id: @kid.id, todo_id: @todo.id)
          put :update, {family_id: @family.id, todo_id: @todo.id, :id => todo_schedule.to_param, :todo_schedule => valid_attributes}, valid_session
          expect(response).to redirect_to([@family, @kid])
        end
      end

      describe "with invalid params" do
        it "assigns the todo_schedule as @todo_schedule" do
          todo_schedule = FactoryGirl.create(:todo_schedule, member_id: @kid.id, todo_id: @todo.id)
          put :update, {family_id: @family.id, todo_id: @todo.id, :id => todo_schedule.to_param, :todo_schedule => invalid_attributes}, valid_session
          expect(assigns(:todo_schedule)).to eq(todo_schedule)
        end

        it "re-renders the 'edit' template" do
          todo_schedule = FactoryGirl.create(:todo_schedule, member_id: @kid.id, todo_id: @todo.id)
          put :update, {family_id: @family.id, todo_id: @todo.id, :id => todo_schedule.to_param, :todo_schedule => invalid_attributes}, valid_session
          expect(response).to redirect_to([@family, todo_schedule.member])
        end
      end
    end



  end

  context 'as a kid' do
    before(:each) do
      @kid = FactoryGirl.create(:member, parent: false)
      @family = @kid.family
      @todo = FactoryGirl.create(:todo, family_id: @family.id)

      sign_in_member(@kid)
    end

    describe "GET index" do
      it "assigns all todo_schedules as @todo_schedules" do
        todo_schedule = FactoryGirl.create(:todo_schedule, member_id: @kid.id, todo_id: @todo.id)
        get :index, {family_id: @family.id, todo_id: @todo.id}, valid_session
        expect(assigns(:todo_schedules)).to match_array([todo_schedule])
      end
    end

    # describe "GET show" do
    #   it "assigns the requested todo_schedule as @todo_schedule" do
    #     todo_schedule = FactoryGirl.create(:todo_schedule, member_id: @kid.id, todo_id: @todo.id)
    #     get :show, {family_id: @family.id, todo_id: @todo.id, :id => todo_schedule.to_param}, valid_session
    #     expect(assigns(:todo_schedule)).to eq(todo_schedule)
    #   end
    # end
    #
    # describe "GET new" do
    #   it "does not allow new" do
    #     todo_schedule = FactoryGirl.create(:todo_schedule, member_id: @kid.id, todo_id: @todo.id)
    #     get :new, {family_id: @family.id, todo_id: @todo.id, todo_schedule_id: todo_schedule.id}, valid_session
    #     expect(response.status).to eq(302)
    #     expect(flash[:error]).to be_present
    #   end
    # end

    describe "GET edit" do
      it "does not allow edit" do
        todo_schedule = FactoryGirl.create(:todo_schedule, member_id: @kid.id, todo_id: @todo.id)
        get :edit, {family_id: @family.id, todo_id: @todo.id, :id => todo_schedule.to_param}, valid_session
        expect(response.status).to eq(302)
        expect(flash[:error]).to be_present
      end
    end

    describe "DELETE destroy" do
      it "does not destroys the requested todo_schedule" do
        todo_schedule = FactoryGirl.create(:todo_schedule, member_id: @kid.id, todo_id: @todo.id)
        expect {
          delete :destroy, {family_id: @family.id, todo_id: @todo.id, :id => todo_schedule.to_param}, valid_session
        }.to change(TodoSchedule, :count).by(0)
        expect(response.status).to eq(302)
        expect(flash[:error]).to be_present
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "does not create a new TodoSchedule" do
          expect {
            post :create, {family_id: @family.id, todo_id: @todo.id, :todo_schedule => valid_attributes}, valid_session
          }.to change(TodoSchedule, :count).by(0)
          expect(response.status).to eq(302)
          expect(flash[:error]).to be_present
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do


        it "does not update the requested todo_schedule" do
          todo_schedule = FactoryGirl.create(:todo_schedule, member_id: @kid.id, todo_id: @todo.id)
          put :update, {family_id: @family.id, todo_id: @todo.id, :id => todo_schedule.to_param, :todo_schedule => {
                         todo_id: @todo.id,
                         member_id: @kid.id,
                         # schedule_rrules_attributes: [ { rule: IceCube::Rule.daily.to_yaml, todo_schedule_id: todo_schedule.id} ]
                     } }, valid_session
          expect(response.status).to eq(302)
          expect(flash[:error]).to be_present
        end
      end
    end
  end

end
