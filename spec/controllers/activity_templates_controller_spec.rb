require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ActivityTemplatesController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # ActivityTemplate. As you add validations to ActivityTemplate, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
        name: 'Activity Template',
        description: 'The description',
        rec_min_age: 2,
        rec_max_age: 20,
        cost: 20,
        reward: 0,
        time_block: 30,
        restricted: true,
        activity_type_id: @activity_type.id
    }
  }

  let(:invalid_attributes) {
    {
        name: nil,
        rec_min_age: -2,
        cost: -20
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ActivityTemplatesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  context "As an adminstrator" do
    before(:each) do
      @user = FactoryGirl.create(:user, admin: true)
      @activity_type = FactoryGirl.create(:activity_type)
      sign_in(@user)
    end

    describe "GET index" do
      it "assigns all activity_templates as @activity_templates" do
        activity_template = FactoryGirl.create(:activity_template)
        get :index, {}, valid_session
        expect(assigns(:activity_templates)).to match_array([activity_template])
      end
    end

    describe "GET show" do
      it "assigns the requested activity_template as @activity_template" do
        activity_template = ActivityTemplate.create! valid_attributes
        get :show, {:id => activity_template.to_param}, valid_session
        expect(assigns(:activity_template)).to eq(activity_template)
      end
    end

    describe "GET new" do
      it "assigns a new activity_template as @activity_template" do
        get :new, {}, valid_session
        expect(assigns(:activity_template)).to be_a_new(ActivityTemplate)
      end
    end

    describe "GET edit" do
      it "assigns the requested activity_template as @activity_template" do
        activity_template = ActivityTemplate.create! valid_attributes
        get :edit, {:id => activity_template.to_param}, valid_session
        expect(assigns(:activity_template)).to eq(activity_template)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new ActivityTemplate" do
          expect {
            post :create, {:activity_template => valid_attributes}, valid_session
          }.to change(ActivityTemplate, :count).by(1)
        end

        it "assigns a newly created activity_template as @activity_template" do
          post :create, {:activity_template => valid_attributes}, valid_session
          expect(assigns(:activity_template)).to be_a(ActivityTemplate)
          expect(assigns(:activity_template)).to be_persisted
        end

        it "redirects to the created activity_template" do
          post :create, {:activity_template => valid_attributes}, valid_session
          expect(response).to redirect_to(ActivityTemplate.last)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved activity_template as @activity_template" do
          post :create, {:activity_template => invalid_attributes}, valid_session
          expect(assigns(:activity_template)).to be_a_new(ActivityTemplate)
        end

        it "re-renders the 'new' template" do
          post :create, {:activity_template => invalid_attributes}, valid_session
          expect(response).to render_template("new")
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        let(:new_attributes) {
          {
              name: 'New Name',
              description: 'Another description',
              rec_min_age: 5,
              rec_max_age: 12,
              cost: 60,
              reward: 0,
              time_block: 60,
              restricted: false
          }
        }

        it "updates the requested activity_template" do
          activity_template = ActivityTemplate.create! valid_attributes
          put :update, {:id => activity_template.to_param, :activity_template => new_attributes}, valid_session
          activity_template.reload
          expect(activity_template.name).to eq("New Name")
          expect(activity_template.description).to eq("Another description")
          expect(activity_template.rec_min_age).to eq(5)
          expect(activity_template.rec_max_age).to eq(12)
          expect(activity_template.cost).to eq(60)
          expect(activity_template.time_block).to eq(60)
          expect(activity_template.restricted).to eq(false)
        end

        it "assigns the requested activity_template as @activity_template" do
          activity_template = ActivityTemplate.create! valid_attributes
          put :update, {:id => activity_template.to_param, :activity_template => valid_attributes}, valid_session
          expect(assigns(:activity_template)).to eq(activity_template)
        end

        it "redirects to the activity_template" do
          activity_template = ActivityTemplate.create! valid_attributes
          put :update, {:id => activity_template.to_param, :activity_template => valid_attributes}, valid_session
          expect(response).to redirect_to(activity_template)
        end
      end

      describe "with invalid params" do
        it "assigns the activity_template as @activity_template" do
          activity_template = ActivityTemplate.create! valid_attributes
          put :update, {:id => activity_template.to_param, :activity_template => invalid_attributes}, valid_session
          expect(assigns(:activity_template)).to eq(activity_template)
        end

        it "re-renders the 'edit' template" do
          activity_template = ActivityTemplate.create! valid_attributes
          put :update, {:id => activity_template.to_param, :activity_template => invalid_attributes}, valid_session
          expect(response).to render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested activity_template" do
        activity_template = ActivityTemplate.create! valid_attributes
        expect {
          delete :destroy, {:id => activity_template.to_param}, valid_session
        }.to change(ActivityTemplate, :count).by(-1)
      end

      it "redirects to the activity_templates list" do
        activity_template = ActivityTemplate.create! valid_attributes
        delete :destroy, {:id => activity_template.to_param}, valid_session
        expect(response).to redirect_to(activity_templates_url)
      end
    end

  end

  context "As a user or member" do
    before(:each) do
      @user = FactoryGirl.create(:user, admin: false)
      @activity_type = FactoryGirl.create(:activity_type)
      sign_in(@user)
    end

    describe "GET index" do
      it "assigns all activity_templates as @activity_templates" do
        activity_template = FactoryGirl.create(:activity_template)
        get :index, {}, valid_session
        expect(assigns(:activity_templates)).to match_array([activity_template])
      end
    end

    describe "GET show" do
      it "assigns the requested activity_template as @activity_template" do
        activity_template = ActivityTemplate.create! valid_attributes
        get :show, {:id => activity_template.to_param}, valid_session
        expect(assigns(:activity_template)).to eq(activity_template)
      end
    end

    describe "GET new" do
      it "does not allow new" do
        get :new, {}, valid_session
        expect(response.status).to eq(302)
        expect(flash[:error]).to be_present
      end
    end

    describe "GET edit" do
      it "does not allow edit" do
        activity_template = ActivityTemplate.create! valid_attributes
        get :edit, {:id => activity_template.to_param}, valid_session
        expect(response.status).to eq(302)
        expect(flash[:error]).to be_present
      end
    end

    describe "POST create" do
      it "does not allow create" do
        post :create, {:activity_template => valid_attributes}, valid_session
        expect(response.status).to eq(302)
        expect(flash[:error]).to be_present
      end
    end

    describe "PUT update" do
      it "does not allow update" do
        activity_template = ActivityTemplate.create! valid_attributes
        put :update, {:id => activity_template.to_param, :activity_template => valid_attributes}, valid_session
        expect(response.status).to eq(302)
        expect(flash[:error]).to be_present
      end
    end

    describe "DELETE destroy" do
      it "does not allow delete" do
        activity_template = ActivityTemplate.create! valid_attributes
        delete :destroy, {:id => activity_template.to_param, :activity_template => valid_attributes}, valid_session
        expect(response.status).to eq(302)
        expect(flash[:error]).to be_present
      end
    end
  end

end
