require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ScreenTimesController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # ScreenTime. As you add validations to ScreenTime, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
        dow: Date.today.wday,
        default_time: 60*60,
        max_time: 120*60
    }
  }

  let(:invalid_attributes) {
    {
        dow: 8,
        default_time: -200,
        max_time: 24*60*60+1
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ActivitiesController. Be sure to keep this updated too.
  let(:valid_session) { {} }


  context 'as a parent' do
    before(:each) do
      @member = FactoryGirl.create(:member, parent: true)
      @family = @member.family
      @kid = FactoryGirl.create(:member, parent: false, family_id: @family.id)
      sign_in_member(@member)
    end

    describe "GET index" do
      it "assigns all screen_times as @screen_times" do
        screen_time = FactoryGirl.create(:screen_time, member_id: @kid.id)
        get :index, {family_id: @family.id, member_id: @kid.id}, valid_session
        expect(assigns(:screen_times)).to include(screen_time)
      end
    end

    describe "GET show" do
      it "assigns the requested screen_time as @screen_time" do
        screen_time = FactoryGirl.create(:screen_time, member_id: @kid.id)
        get :show, {family_id: @family.id, member_id: @kid.id, :id => screen_time.to_param}, valid_session
        expect(assigns(:screen_time)).to eq(screen_time)
      end
    end

    describe "GET new" do
      it "assigns a new screen_time as @screen_time" do
        todo_schedule = FactoryGirl.create(:todo_schedule, member_id: @kid.id)
        get :new, {family_id: @family.id, member_id: @kid.id, todo_schedule_id: todo_schedule.id}, valid_session
        expect(assigns(:screen_time)).to be_a_new(ScreenTime)
      end
    end

    describe "GET edit" do
      it "assigns the requested screen_time as @screen_time" do
        screen_time = FactoryGirl.create(:screen_time, member_id: @kid.id)
        get :edit, {family_id: @family.id, member_id: @kid.id, :id => screen_time.to_param}, valid_session
        expect(assigns(:screen_time)).to eq(screen_time)
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested screen_time" do
        screen_time = FactoryGirl.create(:screen_time, member_id: @kid.id)
        expect {
          delete :destroy, {family_id: @family.id, member_id: @kid.id, :id => screen_time.to_param}, valid_session
        }.to change(ScreenTime, :count).by(-1)
      end

      it "redirects to the current member screen time index" do
        screen_time = FactoryGirl.create(:screen_time, member_id: @kid.id)
        delete :destroy, {family_id: @family.id, member_id: @kid.id, :id => screen_time.to_param}, valid_session
        expect(flash[:error]).to be_falsey
        expect(response).to redirect_to(family_member_screen_times_path(@family, @kid))
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new ScreenTime" do
          expect {
            post :create, {family_id: @family.id, member_id: @kid.id, :screen_time => valid_attributes}, valid_session
          }.to change(ScreenTime, :count).by(1)
        end

        it "assigns a newly created screen_time as @screen_time" do
          post :create, {family_id: @family.id, member_id: @kid.id, :screen_time => valid_attributes}, valid_session
          expect(assigns(:screen_time)).to be_a(ScreenTime)
          expect(assigns(:screen_time)).to be_persisted
        end

        it "redirects to the current member screen_times path" do
          post :create, {family_id: @family.id, member_id: @kid.id, :screen_time => valid_attributes}, valid_session
          expect(response).to redirect_to(family_member_screen_times_path(@family, @kid))
        end

        skip "resets activities restrictions when requested" do
          # TODO: Refect this since there are no more family activities
          sc = @kid.screen_times.create(dow: Date.today.wday, default_time: 7200, max_time: 12000)
          fam_act = FactoryGirl.create(:family_activity, family_id: @kid.family_id)
          sc.restrictions[:activities][fam_act.id] = { default_time: 3000, max_time: 5000 }
          sc.save
          @kid.reload
          expect(@kid.screen_times.last.restrictions[:activities].count).to eq(1)
          post :create, {family_id: @family.id, member_id: @kid.id, :screen_time => valid_attributes, :clear_activities => true}, valid_session
          @kid.reload
          expect(@kid.screen_times.last.restrictions[:activities].count).to eq(0)
        end

        it "resets devices restrictions when requested" do
          sc = @kid.screen_times.create(dow: Date.today.wday, default_time: 7200, max_time: 12000)
          device = FactoryGirl.create(:device, family_id: @kid.family_id)
          sc.restrictions[:devices][device.id] = { default_time: 3000, max_time: 5000 }
          sc.save
          @kid.reload
          expect(@kid.screen_times.last.restrictions[:devices].count).to eq(1)
          post :create, {family_id: @family.id, member_id: @kid.id, :screen_time => valid_attributes, :clear_devices => true}, valid_session
          @kid.reload
          expect(@kid.screen_times.last.restrictions[:devices].count).to eq(0)
        end

      end

      describe "with invalid params" do

        it "assigns a newly created but unsaved screen_time as @screen_time when missing todo_schedule" do
          post :create, {family_id: @family.id, member_id: @kid.id, :screen_time => invalid_attributes}, valid_session
          expect(assigns(:screen_time)).to be_a_new(ScreenTime)
        end

        it "reports the error" do
          post :create, {family_id: @family.id, member_id: @kid.id, :screen_time => invalid_attributes}, valid_session
          expect(response).to redirect_to(family_member_screen_times_path(@family, @kid))
          expect(flash[:alert]).to be_present
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        let(:new_attributes) {
          {
              dow: 2,
              default_time: 4*60*60,
              max_time: 5*60*60
          }
        }

        it "updates the requested screen_time" do
          screen_time = FactoryGirl.create(:screen_time, member_id: @kid.id)
          put :update, {family_id: @family.id, member_id: @kid.id, :id => screen_time.to_param, :screen_time => new_attributes}, valid_session
          screen_time.reload
          expect(screen_time.dow).to eq(2)
          expect(screen_time.default_time).to eq(4*60*60)
          expect(screen_time.max_time).to eq(5*60*60)
        end

        it "assigns the requested screen_time as @screen_time" do
          screen_time = FactoryGirl.create(:screen_time, member_id: @kid.id)
          put :update, {family_id: @family.id, member_id: @kid.id, :id => screen_time.to_param, :screen_time => valid_attributes}, valid_session
          expect(assigns(:screen_time)).to eq(screen_time)
        end

        it "redirects to the screen_time" do
          screen_time = FactoryGirl.create(:screen_time, member_id: @kid.id)
          put :update, {family_id: @family.id, member_id: @kid.id, :id => screen_time.to_param, :screen_time => valid_attributes}, valid_session
          expect(response).to redirect_to(family_member_screen_times_path(@family, @kid))
        end
      end

      describe "with invalid params" do
        it "assigns the screen_time as @screen_time" do
          screen_time = FactoryGirl.create(:screen_time, member_id: @kid.id)
          put :update, {family_id: @family.id, member_id: @kid.id, :id => screen_time.to_param, :screen_time => invalid_attributes}, valid_session
          expect(assigns(:screen_time)).to eq(screen_time)
        end

        it "reports the error" do
          screen_time = FactoryGirl.create(:screen_time, member_id: @kid.id)
          put :update, {family_id: @family.id, member_id: @kid.id, :id => screen_time.to_param, :screen_time => invalid_attributes}, valid_session
          expect(response).to redirect_to(family_member_screen_times_path(@family, @kid))
          expect(flash[:alert]).to be_present
        end
      end

      describe "with restrict params" do
        skip "updates the default screen_time for an activity" do
          # TODO: refactor this since we no longer have family activities
          screen_time = FactoryGirl.create(:screen_time, member_id: @kid.id)
          fam_act = FactoryGirl.create(:family_activity, family_id: @kid.family_id)
          new_attributes = {
              restrict: "{ \"activities\" : { \"#{fam_act.id}\" : { \"default_time\" : 7200 } } }"
          }
          put :update, {family_id: @family.id, member_id: @kid.id, :id => screen_time.to_param, :screen_time => new_attributes}, valid_session
          screen_time.reload
          expect(screen_time.restrictions[:activities][fam_act.id][:default_time]).to eq(7200)
        end
        skip "updates the max screen_time for an activity" do
          # TODO: refactor this since we no longer have family activities
          screen_time = FactoryGirl.create(:screen_time, member_id: @kid.id)
          fam_act = FactoryGirl.create(:family_activity, family_id: @kid.family_id)
          new_attributes = {
              restrict: "{ \"activities\" : { \"#{fam_act.id}\" : { \"max_time\" : 17200 } } }"
          }
          put :update, {family_id: @family.id, member_id: @kid.id, :id => screen_time.to_param, :screen_time => new_attributes}, valid_session
          screen_time.reload
          expect(screen_time.restrictions[:activities][fam_act.id][:max_time]).to eq(17200)
        end

        it "updates the default screen_time for a device" do
          screen_time = FactoryGirl.create(:screen_time, member_id: @kid.id)
          device = FactoryGirl.create(:device, family_id: @kid.family_id)
          new_attributes = {
              restrict: "{ \"devices\" : { \"#{device.id}\" : { \"default_time\" : 7200 } } }"
          }
          put :update, {family_id: @family.id, member_id: @kid.id, :id => screen_time.to_param, :screen_time => new_attributes}, valid_session
          screen_time.reload
          expect(screen_time.restrictions[:devices][device.id][:default_time]).to eq(7200)
        end
        it "updates the max screen_time for a device" do
          screen_time = FactoryGirl.create(:screen_time, member_id: @kid.id)
          device = FactoryGirl.create(:device, family_id: @kid.family_id)
          new_attributes = {
              restrict: "{ \"devices\" : { \"#{device.id}\" : { \"max_time\" : 17200 } } }"
          }
          put :update, {family_id: @family.id, member_id: @kid.id, :id => screen_time.to_param, :screen_time => new_attributes}, valid_session
          screen_time.reload
          expect(screen_time.restrictions[:devices][device.id][:max_time]).to eq(17200)
        end
      end
    end



  end

  context 'as a kid' do
    before(:each) do
      @kid = FactoryGirl.create(:member, parent: false)
      @family = @kid.family

      sign_in_member(@kid)
    end

    describe "GET index" do
      it "assigns all screen_times as @screen_times" do
        screen_time = FactoryGirl.create(:screen_time, member_id: @kid.id)
        get :index, {family_id: @family.id, member_id: @kid.id}, valid_session
        expect(assigns(:screen_times)).to include(screen_time)
      end
    end

    describe "GET show" do
      it "assigns the requested screen_time as @screen_time" do
        screen_time = FactoryGirl.create(:screen_time, member_id: @kid.id)
        get :show, {family_id: @family.id, member_id: @kid.id, :id => screen_time.to_param}, valid_session
        expect(assigns(:screen_time)).to eq(screen_time)
      end
    end

    describe "GET new" do
      it "does not allow new" do
        todo_schedule = FactoryGirl.create(:todo_schedule, member_id: @kid.id)
        get :new, {family_id: @family.id, member_id: @kid.id, todo_schedule_id: todo_schedule.id}, valid_session
        expect(response.status).to eq(302)
        expect(flash[:error]).to be_present
      end
    end

    describe "GET edit" do
      it "does not allow edit" do
        screen_time = FactoryGirl.create(:screen_time, member_id: @kid.id)
        get :edit, {family_id: @family.id, member_id: @kid.id, :id => screen_time.to_param}, valid_session
        expect(response.status).to eq(302)
        expect(flash[:error]).to be_present
      end
    end

    describe "DELETE destroy" do
      it "does not destroys the requested screen_time" do
        screen_time = FactoryGirl.create(:screen_time, member_id: @kid.id)
        expect {
          delete :destroy, {family_id: @family.id, member_id: @kid.id, :id => screen_time.to_param}, valid_session
        }.to change(ScreenTime, :count).by(0)
        expect(response.status).to eq(302)
        expect(flash[:error]).to be_present
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "does not create a new ScreenTime" do
          expect {
            post :create, {family_id: @family.id, member_id: @kid.id, :screen_time => valid_attributes}, valid_session
          }.to change(ScreenTime, :count).by(0)
          expect(response.status).to eq(302)
          expect(flash[:error]).to be_present
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        let(:new_attributes) {
          {
              dow: 2,
              default_time: 4*60*60,
              max_time: 5*60*60
          }
        }

        it "does not update the requested screen_time" do
          screen_time = FactoryGirl.create(:screen_time, member_id: @kid.id)
          put :update, {family_id: @family.id, member_id: @kid.id, :id => screen_time.to_param, :screen_time => new_attributes}, valid_session
          expect(response.status).to eq(302)
          expect(flash[:error]).to be_present
        end
      end
    end
  end

end
